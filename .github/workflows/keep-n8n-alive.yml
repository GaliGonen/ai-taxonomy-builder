name: Keep n8n API Alive (Production Webhook Fix)

on:
  schedule:
    # Run every 8 minutes
    - cron: '*/8 * * * *'
  workflow_dispatch:
    inputs:
      force_execute:
        description: 'Force execute n8n workflow'
        required: false
        default: 'false'

env:
  N8N_BASE_URL: 'https://n8n-render-rwyu.onrender.com'
  TEST_WEBHOOK_URL: 'https://n8n-render-rwyu.onrender.com/webhook-test/search-ai-use-cases'
  PROD_WEBHOOK_URL: 'https://n8n-render-rwyu.onrender.com/webhook/search-ai-use-cases'

jobs:
  keep-alive:
    runs-on: ubuntu-latest
    
    steps:
    - name: Wake n8n Service
      id: wake_service
      run: |
        echo "üöÄ Starting n8n production webhook activation at $(date)"
        
        # Step 1: Wake up Render service
        echo "‚ö° Waking up Render service..."
        wake_response=$(curl -s -m 60 -w "HTTP_CODE:%{http_code}" "$N8N_BASE_URL" || echo "FAILED")
        wake_code=$(echo "$wake_response" | grep -o "HTTP_CODE:[0-9]*" | cut -d: -f2 || echo "000")
        
        echo "Service wake status: HTTP $wake_code"
        
        if [ "$wake_code" = "200" ]; then
          echo "‚úÖ n8n service is awake"
        else
          echo "‚ö†Ô∏è  Service starting up, waiting 45 seconds..."
          sleep 45
        fi
        
        # Step 2: Test PRODUCTION webhook (what your search interface uses)
        echo "üîç Testing PRODUCTION webhook endpoint..."
        prod_response=$(curl -s -m 15 -w "HTTP_CODE:%{http_code}" "$PROD_WEBHOOK_URL" || echo "FAILED")
        prod_code=$(echo "$prod_response" | grep -o "HTTP_CODE:[0-9]*" | cut -d: -f2 || echo "000")
        
        echo "Production webhook status: HTTP $prod_code"
        
        # Also test the test endpoint for comparison
        test_response=$(curl -s -m 15 -w "HTTP_CODE:%{http_code}" "$TEST_WEBHOOK_URL" || echo "FAILED")
        test_code=$(echo "$test_response" | grep -o "HTTP_CODE:[0-9]*" | cut -d: -f2 || echo "000")
        
        echo "Test webhook status: HTTP $test_code"
        
        # Set output for next step
        echo "prod_webhook_status=$prod_code" >> $GITHUB_OUTPUT
        echo "test_webhook_status=$test_code" >> $GITHUB_OUTPUT
        
        if [ "$prod_code" = "200" ] || [ "$prod_code" = "201" ]; then
          echo "‚úÖ Production webhook is ACTIVE! Your search interface should work!"
          echo "workflow_active=true" >> $GITHUB_OUTPUT
        else
          echo "‚ùå Production webhook INACTIVE (HTTP $prod_code)"
          if [ "$test_code" = "200" ] || [ "$test_code" = "201" ]; then
            echo "‚ÑπÔ∏è  Test webhook is active, but production webhook needs activation"
          else
            echo "‚ÑπÔ∏è  Both webhooks inactive - workflow needs full activation"
          fi
          echo "workflow_active=false" >> $GITHUB_OUTPUT
        fi

    - name: Activate Production Webhook
      if: steps.wake_service.outputs.workflow_active == 'false' || github.event.inputs.force_execute == 'true'
      run: |
        echo "üîÑ Attempting to ACTIVATE PRODUCTION webhook..."
        echo "üéØ Goal: Make your search interface work by activating the production endpoint"
        
        test_payload='{"test": true, "source": "github-actions-activation", "timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"}'
        
        # Method 1: Activate via test webhook first (sometimes this enables both)
        echo "üì° Method 1: Triggering test webhook to activate workflow..."
        
        test_exec=$(curl -s -m 30 -w "HTTP_CODE:%{http_code}" \
          -X POST \
          -H "Content-Type: application/json" \
          -H "User-Agent: GitHub-Actions-Activation/1.0" \
          -d "$test_payload" \
          "$TEST_WEBHOOK_URL" || echo "FAILED")
        
        test_exec_code=$(echo "$test_exec" | grep -o "HTTP_CODE:[0-9]*" | cut -d: -f2 || echo "000")
        echo "Test webhook trigger result: HTTP $test_exec_code"
        
        # Wait for activation to propagate
        echo "‚è±Ô∏è  Waiting 15 seconds for workflow activation..."
        sleep 15
        
        # Method 2: Try to trigger production webhook directly
        echo "üì° Method 2: Attempting production webhook activation..."
        
        prod_exec=$(curl -s -m 30 -w "HTTP_CODE:%{http_code}" \
          -X POST \
          -H "Content-Type: application/json" \
          -H "User-Agent: GitHub-Actions-Activation/1.0" \
          -d "$test_payload" \
          "$PROD_WEBHOOK_URL" || echo "FAILED")
        
        prod_exec_code=$(echo "$prod_exec" | grep -o "HTTP_CODE:[0-9]*" | cut -d: -f2 || echo "000")
        echo "Production webhook trigger result: HTTP $prod_exec_code"
        
        # Method 3: Try GET requests (sometimes helps with registration)
        echo "üì° Method 3: GET requests to register webhooks..."
        
        get_test=$(curl -s -m 15 -w "HTTP_CODE:%{http_code}" "$TEST_WEBHOOK_URL" || echo "FAILED")
        get_test_code=$(echo "$get_test" | grep -o "HTTP_CODE:[0-9]*" | cut -d: -f2 || echo "000")
        
        get_prod=$(curl -s -m 15 -w "HTTP_CODE:%{http_code}" "$PROD_WEBHOOK_URL" || echo "FAILED")
        get_prod_code=$(echo "$get_prod" | grep -o "HTTP_CODE:[0-9]*" | cut -d: -f2 || echo "000")
        
        echo "GET test webhook: HTTP $get_test_code"
        echo "GET production webhook: HTTP $get_prod_code"
        
        echo "‚úÖ All activation methods attempted"
        
        # Final wait for full activation
        echo "‚è±Ô∏è  Waiting 20 seconds for complete activation..."
        sleep 20

    - name: Final Verification
      run: |
        echo "üîç FINAL VERIFICATION - Testing what your search interface will see..."
        
        # Test the PRODUCTION webhook (this is what your search interface calls)
        echo "üéØ Testing production webhook: $PROD_WEBHOOK_URL"
        
        final_prod_test=$(curl -s -m 15 -w "HTTP_CODE:%{http_code}|TIME:%{time_total}" "$PROD_WEBHOOK_URL" || echo "FAILED")
        final_prod_code=$(echo "$final_prod_test" | grep -o "HTTP_CODE:[0-9]*" | cut -d: -f2 || echo "000")
        final_prod_time=$(echo "$final_prod_test" | grep -o "TIME:[0-9.]*" | cut -d: -f2 || echo "unknown")
        
        # Also test test webhook for comparison
        final_test_test=$(curl -s -m 15 -w "HTTP_CODE:%{http_code}" "$TEST_WEBHOOK_URL" || echo "FAILED")
        final_test_code=$(echo "$final_test_test" | grep -o "HTTP_CODE:[0-9]*" | cut -d: -f2 || echo "000")
        
        echo ""
        echo "üìä FINAL STATUS REPORT:"
        echo "========================"
        echo "Production Webhook (used by your search): HTTP $final_prod_code"
        echo "Test Webhook (for comparison): HTTP $final_test_code"
        echo "Production Response Time: ${final_prod_time}s"
        echo "Timestamp: $(date)"
        echo ""
        
        if [ "$final_prod_code" = "200" ] || [ "$final_prod_code" = "201" ]; then
          echo "üéâ SUCCESS! Your search interface should work now!"
          echo "‚úÖ Production webhook is ACTIVE and responding"
          echo "üöÄ You can test your search interface - it should connect properly"
          
          if (( $(echo "$final_prod_time > 2" | bc -l) )); then
            echo "‚ö†Ô∏è  Note: Response time is ${final_prod_time}s (webhook was just activated)"
          else
            echo "‚ö° Excellent: Fast response time (${final_prod_time}s)"
          fi
          
        elif [ "$final_prod_code" = "404" ]; then
          echo "‚ùå PRODUCTION WEBHOOK STILL INACTIVE"
          echo ""
          
          if [ "$final_test_code" = "200" ]; then
            echo "üîç Analysis: Test webhook works, but production webhook failed to activate"
            echo ""
            echo "üõ†Ô∏è  MANUAL FIX REQUIRED:"
            echo "1. Go to: $N8N_BASE_URL"
            echo "2. Open your workflow"
            echo "3. Check webhook trigger settings (should be 'Production' not 'Test')"
            echo "4. Click 'Execute workflow' button"
            echo "5. Save the workflow"
            echo ""
            echo "üîß Alternative: Your workflow might need to be configured differently"
            echo "   - Make sure webhook trigger is set to 'Production' mode"
            echo "   - Ensure the webhook path is exactly: search-ai-use-cases"
          else
            echo "üîç Analysis: Both webhooks are inactive - workflow completely stopped"
            echo ""
            echo "üõ†Ô∏è  MANUAL FIX REQUIRED:"
            echo "1. Go to: $N8N_BASE_URL"
            echo "2. Open your workflow"
            echo "3. Click 'Execute workflow' button"
            echo "4. Make sure workflow is saved and active"
          fi
          
        else
          echo "‚ö†Ô∏è  UNEXPECTED STATUS: HTTP $final_prod_code"
          echo "This might indicate a server error or configuration issue"
          echo "Check your n8n dashboard for workflow errors"
        fi
        
        echo ""
        echo "‚è∞ Next automated check in 8 minutes"
        echo "üîó Test your search interface now: [your-search-interface-file.html]"

    - name: Usage Summary
      if: always()
      run: |
        echo ""
        echo "üìà GITHUB ACTIONS USAGE:"
        echo "========================"
        echo "Workflow: Production Webhook Activation"
        echo "Runtime: ~3-4 minutes per run"
        echo "Frequency: Every 8 minutes (180 runs/day)"
        echo "Monthly usage: ~720 minutes (well under 2000 limit)"
        echo "Cost: $0 (GitHub Actions free tier)"
        echo ""
        echo "üéØ PURPOSE: Keep your search interface connected 24/7"
