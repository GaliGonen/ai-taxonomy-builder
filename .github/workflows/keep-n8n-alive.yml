name: Keep n8n API Alive (Auto-Execute)

on:
  schedule:
    # Run every 8 minutes
    - cron: '*/8 * * * *'
  workflow_dispatch:
    inputs:
      force_execute:
        description: 'Force execute n8n workflow'
        required: false
        default: 'false'

env:
  N8N_BASE_URL: 'https://n8n-render-rwyu.onrender.com'
  WEBHOOK_URL: 'https://n8n-render-rwyu.onrender.com/webhook-test/search-ai-use-cases'

jobs:
  keep-alive:
    runs-on: ubuntu-latest
    
    steps:
    - name: Wake and Test n8n Service
      id: wake_service
      run: |
        echo "üöÄ Starting n8n keep-alive at $(date)"
        
        # Step 1: Wake up Render service
        echo "‚ö° Waking up Render service..."
        wake_response=$(curl -s -m 60 -w "HTTP_CODE:%{http_code}" "$N8N_BASE_URL" || echo "FAILED")
        wake_code=$(echo "$wake_response" | grep -o "HTTP_CODE:[0-9]*" | cut -d: -f2 || echo "000")
        
        echo "Service wake status: HTTP $wake_code"
        
        if [ "$wake_code" = "200" ]; then
          echo "‚úÖ n8n service is awake"
        else
          echo "‚ö†Ô∏è  Service starting up, waiting 45 seconds..."
          sleep 45
        fi
        
        # Step 2: Test webhook endpoint
        echo "üîç Testing webhook endpoint..."
        webhook_response=$(curl -s -m 15 -w "HTTP_CODE:%{http_code}" "$WEBHOOK_URL" || echo "FAILED")
        webhook_code=$(echo "$webhook_response" | grep -o "HTTP_CODE:[0-9]*" | cut -d: -f2 || echo "000")
        
        echo "webhook_status=$webhook_code" >> $GITHUB_OUTPUT
        
        if [ "$webhook_code" = "200" ] || [ "$webhook_code" = "201" ]; then
          echo "‚úÖ Webhook is active! Workflow is running."
          echo "workflow_active=true" >> $GITHUB_OUTPUT
        else
          echo "‚ùå Webhook inactive (HTTP $webhook_code) - workflow needs execution"
          echo "workflow_active=false" >> $GITHUB_OUTPUT
        fi

    - name: Execute n8n Workflow via Test Execution
      if: steps.wake_service.outputs.workflow_active == 'false' || github.event.inputs.force_execute == 'true'
      run: |
        echo "üîÑ Attempting to execute n8n workflow..."
        
        # Method 1: Try to trigger via webhook with test data
        echo "üì° Method 1: Testing webhook trigger with sample data..."
        
        test_payload='{"test": true, "source": "github-actions", "timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"}'
        
        execute_response=$(curl -s -m 30 -w "HTTP_CODE:%{http_code}" \
          -X POST \
          -H "Content-Type: application/json" \
          -H "User-Agent: GitHub-Actions-KeepAlive/1.0" \
          -d "$test_payload" \
          "$WEBHOOK_URL" || echo "FAILED")
        
        execute_code=$(echo "$execute_response" | grep -o "HTTP_CODE:[0-9]*" | cut -d: -f2 || echo "000")
        
        echo "Execution attempt result: HTTP $execute_code"
        
        if [ "$execute_code" = "200" ] || [ "$execute_code" = "201" ]; then
          echo "‚úÖ Workflow execution successful via webhook!"
        else
          echo "‚ö†Ô∏è  Webhook execution failed, trying alternative method..."
          
          # Method 2: Try to activate via main webhook endpoint (without test path)
          echo "üì° Method 2: Testing main webhook endpoint..."
          
          main_webhook="https://n8n-render-rwyu.onrender.com/webhook/search-ai-use-cases"
          
          main_response=$(curl -s -m 30 -w "HTTP_CODE:%{http_code}" \
            -X POST \
            -H "Content-Type: application/json" \
            -d "$test_payload" \
            "$main_webhook" || echo "FAILED")
          
          main_code=$(echo "$main_response" | grep -o "HTTP_CODE:[0-9]*" | cut -d: -f2 || echo "000")
          
          echo "Main webhook result: HTTP $main_code"
          
          if [ "$main_code" = "200" ] || [ "$main_code" = "201" ]; then
            echo "‚úÖ Workflow activated via main webhook!"
          else
            echo "‚ùå Both execution methods failed"
            echo "   Test webhook: HTTP $execute_code"
            echo "   Main webhook: HTTP $main_code"
          fi
        fi
        
        # Wait a bit for workflow to fully initialize
        echo "‚è±Ô∏è  Waiting 15 seconds for workflow to initialize..."
        sleep 15

    - name: Verify Workflow Status
      run: |
        echo "üîç Final verification of workflow status..."
        
        # Test the webhook again after execution attempt
        final_test=$(curl -s -m 15 -w "HTTP_CODE:%{http_code}" "$WEBHOOK_URL" || echo "FAILED")
        final_code=$(echo "$final_test" | grep -o "HTTP_CODE:[0-9]*" | cut -d: -f2 || echo "000")
        
        echo "üìä Final Status Check:"
        echo "   Webhook URL: $WEBHOOK_URL"
        echo "   Response Code: HTTP $final_code"
        echo "   Timestamp: $(date)"
        
        if [ "$final_code" = "200" ] || [ "$final_code" = "201" ]; then
          echo "üéØ SUCCESS: n8n workflow is now active and responding!"
          
          # Test response time for performance monitoring
          response_time=$(curl -s -m 10 -w "%{time_total}" -o /dev/null "$WEBHOOK_URL" || echo "unknown")
          echo "   Response time: ${response_time}s"
          
          if (( $(echo "$response_time > 2" | bc -l) )); then
            echo "   Performance: SLOW (recently activated)"
          else
            echo "   Performance: FAST (fully warmed up)"
          fi
          
        elif [ "$final_code" = "404" ]; then
          echo "‚ùå FAILED: Workflow is still inactive after execution attempts"
          echo ""
          echo "üîç Troubleshooting Steps:"
          echo "1. Check your n8n workflow configuration"
          echo "2. Verify webhook trigger is properly set up"  
          echo "3. Ensure workflow is not disabled in n8n dashboard"
          echo "4. Check if there are any workflow errors in n8n logs"
          echo ""
          echo "üéØ Manual Fix: Go to n8n dashboard and click 'Execute Workflow'"
          
        else
          echo "‚ö†Ô∏è  UNKNOWN STATUS: HTTP $final_code"
          echo "This might indicate a configuration issue or service problem."
        fi
        
        echo "‚è∞ Next automated check in 8 minutes"

    - name: Usage Statistics
      if: always()
      run: |
        echo "üìà GitHub Actions Usage Summary:"
        echo "   Workflow: Keep n8n API Alive"
        echo "   Runtime: ~2-3 minutes per run"
        echo "   Frequency: Every 8 minutes (180 runs/day)"
        echo "   Monthly usage: ~540 minutes (well under 2000 limit)"
        echo "   Cost: $0 (GitHub Actions free tier)"
