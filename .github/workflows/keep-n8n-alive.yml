name: Keep n8n API Alive (Auto-Activate)

on:
  schedule:
    # Run every 8 minutes (more frequent to catch sleep faster)
    - cron: '*/8 * * * *'
  workflow_dispatch:
    inputs:
      test_run:
        description: 'Manual test run'
        required: false
        default: 'true'

jobs:
  keep-alive:
    runs-on: ubuntu-latest
    
    steps:
    - name: Wake and Activate n8n
      run: |
        echo "üöÄ Starting n8n keep-alive and auto-activation at $(date)"
        
        # URLs
        N8N_BASE_URL="https://n8n-render-rwyu.onrender.com"
        WEBHOOK_URL="$N8N_BASE_URL/webhook-test/search-ai-use-cases"
        
        echo "üîç Step 1: Checking if n8n service is awake..."
        
        # First, try to wake up the Render service by hitting the main URL
        echo "‚ö° Waking up Render service..."
        wake_response=$(curl -s -m 60 -w "HTTP_CODE:%{http_code}" "$N8N_BASE_URL" || echo "FAILED")
        wake_code=$(echo "$wake_response" | grep -o "HTTP_CODE:[0-9]*" | cut -d: -f2 || echo "000")
        
        if [ "$wake_code" = "200" ]; then
          echo "‚úÖ n8n service is awake (HTTP $wake_code)"
        else
          echo "‚ö†Ô∏è  n8n service wake attempt: HTTP $wake_code (might be starting up...)"
          echo "‚è±Ô∏è  Waiting 45 seconds for full startup..."
          sleep 45
        fi
        
        echo "üîç Step 2: Testing webhook endpoint..."
        
        # Now test the webhook endpoint
        retry_count=0
        max_retries=4
        success=false
        
        while [ $retry_count -lt $max_retries ] && [ "$success" = false ]; do
          echo "üì° Testing webhook - attempt $((retry_count + 1)) of $max_retries..."
          
          webhook_response=$(curl -s -m 30 -w "HTTP_CODE:%{http_code}" \
            -H "Content-Type: application/json" \
            -H "User-Agent: GitHub-Actions-KeepAlive/1.0" \
            "$WEBHOOK_URL" 2>/dev/null || echo "FAILED")
          
          webhook_code=$(echo "$webhook_response" | grep -o "HTTP_CODE:[0-9]*" | cut -d: -f2 || echo "000")
          
          echo "Webhook response code: $webhook_code"
          
          if [ "$webhook_code" = "200" ] || [ "$webhook_code" = "201" ] || [ "$webhook_code" = "204" ]; then
            echo "‚úÖ Webhook active! n8n workflow is running."
            success=true
          elif [ "$webhook_code" = "404" ]; then
            echo "‚ùå Webhook not found (404) - workflow might be inactive"
            retry_count=$((retry_count + 1))
            if [ $retry_count -lt $max_retries ]; then
              echo "‚è±Ô∏è  Waiting 30 seconds before retry (workflow might be starting)..."
              sleep 30
            fi
          elif [ "$webhook_code" = "000" ] || [ "$webhook_code" = "" ]; then
            echo "‚ùå No response from webhook - service might still be starting"
            retry_count=$((retry_count + 1))
            if [ $retry_count -lt $max_retries ]; then
              echo "‚è±Ô∏è  Waiting 30 seconds for service to fully start..."
              sleep 30
            fi
          else
            echo "‚ö†Ô∏è  Unexpected response: HTTP $webhook_code"
            retry_count=$((retry_count + 1))
            if [ $retry_count -lt $max_retries ]; then
              echo "‚è±Ô∏è  Waiting 20 seconds before retry..."
              sleep 20
            fi
          fi
        done
        
        # Final status
        if [ "$success" = true ]; then
          echo "üéØ SUCCESS: n8n workflow is active and responding!"
        else
          echo "üö® FAILED: Unable to activate n8n workflow after $max_retries attempts"
          echo ""
          echo "üîç Diagnostic Information:"
          echo "   - Service wake status: HTTP $wake_code"
          echo "   - Final webhook status: HTTP $webhook_code"
          echo "   - Service URL: $N8N_BASE_URL"
          echo "   - Webhook URL: $WEBHOOK_URL"
          echo ""
          echo "üí° Possible solutions:"
          echo "   1. Check if your n8n workflow is properly configured"
          echo "   2. Verify the webhook URL path is correct"
          echo "   3. Manually activate the workflow in n8n dashboard"
          echo "   4. Check Render service logs for errors"
          exit 1
        fi

    - name: Extended Health Monitor
      if: always()
      run: |
        echo "üè• Running extended health monitoring..."
        
        WEBHOOK_URL="https://n8n-render-rwyu.onrender.com/webhook-test/search-ai-use-cases"
        
        # Test response time and detailed status
        start_time=$(date +%s.%N)
        response=$(curl -s -m 15 -w "HTTP_CODE:%{http_code}|TIME:%{time_total}" "$WEBHOOK_URL" || echo "FAILED")
        end_time=$(date +%s.%N)
        
        http_code=$(echo "$response" | grep -o "HTTP_CODE:[0-9]*" | cut -d: -f2 || echo "000")
        response_time=$(echo "$response" | grep -o "TIME:[0-9.]*" | cut -d: -f2 || echo "unknown")
        
        echo "üìä Health Check Results:"
        echo "   Status Code: $http_code"
        echo "   Response Time: ${response_time}s"
        echo "   Timestamp: $(date)"
        
        if [ "$http_code" = "200" ]; then
          if (( $(echo "$response_time > 3" | bc -l) )); then
            echo "‚ö†Ô∏è  Status: SLOW - API responding but slow (${response_time}s)"
            echo "   This might indicate the service was recently awakened"
          else
            echo "‚úÖ Status: EXCELLENT - Fast response (${response_time}s)"
          fi
        elif [ "$http_code" = "404" ]; then
          echo "‚ùå Status: WORKFLOW INACTIVE - n8n workflow not running"
        elif [ "$http_code" = "000" ]; then
          echo "‚ùå Status: SERVICE DOWN - No response from server"
        else
          echo "‚ö†Ô∏è  Status: UNUSUAL - HTTP $http_code"
        fi
        
        echo "‚è∞ Next check in 8 minutes at $(date -d '+8 minutes')"
